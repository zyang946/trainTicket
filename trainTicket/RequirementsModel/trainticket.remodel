UseCaseModel TrainTicket {

	UC::buyTicket include queryInformation definedBySSD(BuyTicketSSD) relatedService(BuyTicketService)
	UC::queryInformation
	UC::cancelTrip
	UC::sendNotification
	UC::manageRoute relatedService(ManageRouteCRUDService)
	UC::manageTrain relatedService(ManageTrainCRUDService)
	UC::manageSeat relatedService(ManageSeatCRUDService)
	UC::queryOrder definedBySSD(QueryOrderSSD) relatedService(QueryOrderService)
	UC::manageAccout relatedService(ManageAccoutCRUDService)
	UC::modifyTrip definedBySSD(ModifyTripSSD) relatedService(ModifyTripService)
	UC::deleteOverdueOrder definedBySSD(DeleteOverdueOrderSSD) relatedService(DeleteOverdueOrderService)

	Actor Passenger {
		buyTicket
		queryInformation
		cancelTrip
		modifyTrip
	}

	Actor ThirdSystem {
		sendNotification
	}

	Actor Staff {
		manageRoute
		manageTrain
		manageSeat
	}

	Actor Administrator {
		queryOrder
		manageAccout
		deleteOverdueOrder
	}

	Interaction BuyTicketSSD {

		[Participants: Passenger TrainTicketSystem]

		CallMessage::BuyTicketSSDCallMessage1(buyTicket BuyTicketSSDCallMessage1SendingEnd -> BuyTicketSSDExecution1StartEnd)
		ReturnMessage::BuyTicketSSDCallMessage1Return(BuyTicketSSDExecution1FinishEnd -> BuyTicketSSDCallMessage1ReturnReceivingEnd BuyTicketSSDCallMessage1)
		CallMessage::BuyTicketSSDCallMessage3(saveOrder BuyTicketSSDCallMessage3SendingEnd -> BuyTicketSSDExecution2StartEnd)
		ReturnMessage::BuyTicketSSDCallMessage3Return(BuyTicketSSDExecution2FinishEnd -> BuyTicketSSDCallMessage3ReturnReceivingEnd BuyTicketSSDCallMessage3)
		CallMessage::BuyTicketSSDCallMessage5(pay BuyTicketSSDCallMessage5SendingEnd -> BuyTicketSSDExecution3StartEnd)
		ReturnMessage::BuyTicketSSDCallMessage5Return(BuyTicketSSDExecution3FinishEnd -> BuyTicketSSDCallMessage5ReturnReceivingEnd BuyTicketSSDCallMessage5)

		Execution::BuyTicketSSDExecution1(TrainTicketSystem BuyTicketSSDExecution1StartEnd BuyTicketSSDExecution1FinishEnd)
		Execution::BuyTicketSSDExecution2(TrainTicketSystem BuyTicketSSDExecution2StartEnd BuyTicketSSDExecution2FinishEnd)
		Execution::BuyTicketSSDExecution3(TrainTicketSystem BuyTicketSSDExecution3StartEnd BuyTicketSSDExecution3FinishEnd)

		MessageEnd::BuyTicketSSDCallMessage1SendingEnd(Passenger BuyTicketSSDCallMessage1)
		ExecutionEnd::BuyTicketSSDExecution1StartEnd(TrainTicketSystem BuyTicketSSDExecution1)
		ExecutionEnd::BuyTicketSSDExecution1FinishEnd(TrainTicketSystem BuyTicketSSDExecution1)
		MessageEnd::BuyTicketSSDCallMessage1ReturnReceivingEnd(Passenger BuyTicketSSDCallMessage1Return)
		MessageEnd::BuyTicketSSDCallMessage3SendingEnd(Passenger BuyTicketSSDCallMessage3)
		ExecutionEnd::BuyTicketSSDExecution2StartEnd(TrainTicketSystem BuyTicketSSDExecution2)
		ExecutionEnd::BuyTicketSSDExecution2FinishEnd(TrainTicketSystem BuyTicketSSDExecution2)
		MessageEnd::BuyTicketSSDCallMessage3ReturnReceivingEnd(Passenger BuyTicketSSDCallMessage3Return)
		MessageEnd::BuyTicketSSDCallMessage5SendingEnd(Passenger BuyTicketSSDCallMessage5)
		ExecutionEnd::BuyTicketSSDExecution3StartEnd(TrainTicketSystem BuyTicketSSDExecution3)
		ExecutionEnd::BuyTicketSSDExecution3FinishEnd(TrainTicketSystem BuyTicketSSDExecution3)
		MessageEnd::BuyTicketSSDCallMessage5ReturnReceivingEnd(Passenger BuyTicketSSDCallMessage5Return)

	}

	Interaction QueryOrderSSD {

		[Participants: Administrator TrainTicketSystem]

		CallMessage::QueryOrderSSDCallMessage1(queryByAccoutId QueryOrderSSDCallMessage1SendingEnd -> QueryOrderSSDExecution1StartEnd)
		ReturnMessage::QueryOrderSSDCallMessage1Return(QueryOrderSSDExecution1FinishEnd -> QueryOrderSSDCallMessage1ReturnReceivingEnd QueryOrderSSDCallMessage1)
		CallMessage::QueryOrderSSDCallMessage3(queryTicketId QueryOrderSSDCallMessage3SendingEnd -> QueryOrderSSDExecution2StartEnd)
		ReturnMessage::QueryOrderSSDCallMessage3Return(QueryOrderSSDExecution2FinishEnd -> QueryOrderSSDCallMessage3ReturnReceivingEnd QueryOrderSSDCallMessage3)
		CallMessage::QueryOrderSSDCallMessage5(deleteOverdueTicket QueryOrderSSDCallMessage5SendingEnd -> QueryOrderSSDExecution3StartEnd)
		ReturnMessage::QueryOrderSSDCallMessage5Return(QueryOrderSSDExecution3FinishEnd -> QueryOrderSSDCallMessage5ReturnReceivingEnd QueryOrderSSDCallMessage5)
		CallMessage::QueryOrderSSDCallMessage7(deleteOverdueOrder QueryOrderSSDCallMessage7SendingEnd -> QueryOrderSSDExecution4StartEnd)
		ReturnMessage::QueryOrderSSDCallMessage7Return(QueryOrderSSDExecution4FinishEnd -> QueryOrderSSDCallMessage7ReturnReceivingEnd QueryOrderSSDCallMessage7)

		Execution::QueryOrderSSDExecution1(TrainTicketSystem QueryOrderSSDExecution1StartEnd QueryOrderSSDExecution1FinishEnd)
		Execution::QueryOrderSSDExecution2(TrainTicketSystem QueryOrderSSDExecution2StartEnd QueryOrderSSDExecution2FinishEnd)
		Execution::QueryOrderSSDExecution3(DeleteOverdueOrderService QueryOrderSSDExecution3StartEnd QueryOrderSSDExecution3FinishEnd)
		Execution::QueryOrderSSDExecution4(DeleteOverdueOrderService QueryOrderSSDExecution4StartEnd QueryOrderSSDExecution4FinishEnd)

		CombinedFragment:: queryMethod -> alt {

			[Participants:TrainTicketSystem Administrator]

			combinedFragement1StartEnd -> combinedFragement1FinishEnd

			Operand::accoutId(condition1End condition3End)
			Operand::ticketId(condition3End combinedFragement1FinishEnd)
		}

		MessageEnd::QueryOrderSSDCallMessage7SendingEnd(Administrator QueryOrderSSDCallMessage7)
		ExecutionEnd::QueryOrderSSDExecution4StartEnd(DeleteOverdueOrderService QueryOrderSSDExecution4)
		ExecutionEnd::QueryOrderSSDExecution4FinishEnd(DeleteOverdueOrderService QueryOrderSSDExecution4)
		MessageEnd::QueryOrderSSDCallMessage7ReturnReceivingEnd(Administrator QueryOrderSSDCallMessage7Return)
		MessageEnd::QueryOrderSSDCallMessage5SendingEnd(Administrator QueryOrderSSDCallMessage5)
		ExecutionEnd::QueryOrderSSDExecution3StartEnd(DeleteOverdueOrderService QueryOrderSSDExecution3)
		ExecutionEnd::QueryOrderSSDExecution3FinishEnd(DeleteOverdueOrderService QueryOrderSSDExecution3)
		MessageEnd::QueryOrderSSDCallMessage5ReturnReceivingEnd(Administrator QueryOrderSSDCallMessage5Return)
		CombinedFragmentEnd::combinedFragement1StartEnd(queryMethod)
		OperandEnd::condition1End(accoutId)
		MessageEnd::QueryOrderSSDCallMessage1SendingEnd(Administrator QueryOrderSSDCallMessage1)
		ExecutionEnd::QueryOrderSSDExecution1StartEnd(TrainTicketSystem QueryOrderSSDExecution1)
		ExecutionEnd::QueryOrderSSDExecution1FinishEnd(TrainTicketSystem QueryOrderSSDExecution1)
		MessageEnd::QueryOrderSSDCallMessage1ReturnReceivingEnd(Administrator QueryOrderSSDCallMessage1Return)
		OperandEnd::condition3End(ticketId)
		MessageEnd::QueryOrderSSDCallMessage3SendingEnd(Administrator QueryOrderSSDCallMessage3)
		ExecutionEnd::QueryOrderSSDExecution2StartEnd(TrainTicketSystem QueryOrderSSDExecution2)
		ExecutionEnd::QueryOrderSSDExecution2FinishEnd(TrainTicketSystem QueryOrderSSDExecution2)
		MessageEnd::QueryOrderSSDCallMessage3ReturnReceivingEnd(Administrator QueryOrderSSDCallMessage3Return)
		CombinedFragmentEnd::combinedFragement1FinishEnd(queryMethod)

	}

	Interaction ModifyTripSSD {

		[Participants: Passenger ModifyTripService]

		CallMessage::ModifyTripSSDCallMessage1(updateTicket ModifyTripSSDCallMessage1SendingEnd -> ModifyTripSSDExecution1StartEnd)
		ReturnMessage::ModifyTripSSDCallMessage1Return(ModifyTripSSDExecution1FinishEnd -> ModifyTripSSDCallMessage1ReturnReceivingEnd ModifyTripSSDCallMessage1)
		CallMessage::ModifyTripSSDCallMessage3(updateOrder ModifyTripSSDCallMessage3SendingEnd -> ModifyTripSSDExecution2StartEnd)
		ReturnMessage::ModifyTripSSDCallMessage3Return(ModifyTripSSDExecution2FinishEnd -> ModifyTripSSDCallMessage3ReturnReceivingEnd ModifyTripSSDCallMessage3)
		CallMessage::ModifyTripSSDCallMessage5(updateTicket ModifyTripSSDCallMessage5SendingEnd -> ModifyTripSSDExecution3StartEnd)
		ReturnMessage::ModifyTripSSDCallMessage5Return(ModifyTripSSDExecution3FinishEnd -> ModifyTripSSDCallMessage5ReturnReceivingEnd ModifyTripSSDCallMessage5)
		CallMessage::ModifyTripSSDCallMessage7(updateOrder ModifyTripSSDCallMessage7SendingEnd -> ModifyTripSSDExecution4StartEnd)
		ReturnMessage::ModifyTripSSDCallMessage7Return(ModifyTripSSDExecution4FinishEnd -> ModifyTripSSDCallMessage7ReturnReceivingEnd ModifyTripSSDCallMessage7)
		CallMessage::ModifyTripSSDCallMessage9(payDifference ModifyTripSSDCallMessage9SendingEnd -> ModifyTripSSDExecution5StartEnd)
		ReturnMessage::ModifyTripSSDCallMessage9Return(ModifyTripSSDExecution5FinishEnd -> ModifyTripSSDCallMessage9ReturnReceivingEnd ModifyTripSSDCallMessage9)

		Execution::ModifyTripSSDExecution1(ModifyTripService ModifyTripSSDExecution1StartEnd ModifyTripSSDExecution1FinishEnd)
		Execution::ModifyTripSSDExecution2(ModifyTripService ModifyTripSSDExecution2StartEnd ModifyTripSSDExecution2FinishEnd)
		Execution::ModifyTripSSDExecution3(ModifyTripService ModifyTripSSDExecution3StartEnd ModifyTripSSDExecution3FinishEnd)
		Execution::ModifyTripSSDExecution4(ModifyTripService ModifyTripSSDExecution4StartEnd ModifyTripSSDExecution4FinishEnd)
		Execution::ModifyTripSSDExecution5(ModifyTripService ModifyTripSSDExecution5StartEnd ModifyTripSSDExecution5FinishEnd)

		MessageEnd::ModifyTripSSDCallMessage5SendingEnd(Passenger ModifyTripSSDCallMessage5)
		ExecutionEnd::ModifyTripSSDExecution3StartEnd(ModifyTripService ModifyTripSSDExecution3)
		ExecutionEnd::ModifyTripSSDExecution3FinishEnd(ModifyTripService ModifyTripSSDExecution3)
		MessageEnd::ModifyTripSSDCallMessage5ReturnReceivingEnd(Passenger ModifyTripSSDCallMessage5Return)
		MessageEnd::ModifyTripSSDCallMessage7SendingEnd(Passenger ModifyTripSSDCallMessage7)
		ExecutionEnd::ModifyTripSSDExecution4StartEnd(ModifyTripService ModifyTripSSDExecution4)
		ExecutionEnd::ModifyTripSSDExecution4FinishEnd(ModifyTripService ModifyTripSSDExecution4)
		MessageEnd::ModifyTripSSDCallMessage7ReturnReceivingEnd(Passenger ModifyTripSSDCallMessage7Return)
		MessageEnd::ModifyTripSSDCallMessage9SendingEnd(Passenger ModifyTripSSDCallMessage9)
		ExecutionEnd::ModifyTripSSDExecution5StartEnd(ModifyTripService ModifyTripSSDExecution5)
		ExecutionEnd::ModifyTripSSDExecution5FinishEnd(ModifyTripService ModifyTripSSDExecution5)
		MessageEnd::ModifyTripSSDCallMessage9ReturnReceivingEnd(Passenger ModifyTripSSDCallMessage9Return)
		MessageEnd::ModifyTripSSDCallMessage1SendingEnd(Passenger ModifyTripSSDCallMessage1)
		ExecutionEnd::ModifyTripSSDExecution1StartEnd(ModifyTripService ModifyTripSSDExecution1)
		ExecutionEnd::ModifyTripSSDExecution1FinishEnd(ModifyTripService ModifyTripSSDExecution1)
		MessageEnd::ModifyTripSSDCallMessage1ReturnReceivingEnd(Passenger ModifyTripSSDCallMessage1Return)
		MessageEnd::ModifyTripSSDCallMessage3SendingEnd(Passenger ModifyTripSSDCallMessage3)
		ExecutionEnd::ModifyTripSSDExecution2StartEnd(ModifyTripService ModifyTripSSDExecution2)
		ExecutionEnd::ModifyTripSSDExecution2FinishEnd(ModifyTripService ModifyTripSSDExecution2)
		MessageEnd::ModifyTripSSDCallMessage3ReturnReceivingEnd(Passenger ModifyTripSSDCallMessage3Return)

	}

	Interaction DeleteOverdueOrderSSD {

		[Participants: Administrator DeleteOverdueOrderService]

		CallMessage::DeleteOverdueOrderSSDCallMessage1(deleteOverdueTicket DeleteOverdueOrderSSDCallMessage1SendingEnd -> DeleteOverdueOrderSSDExecution1StartEnd)
		ReturnMessage::DeleteOverdueOrderSSDCallMessage1Return(DeleteOverdueOrderSSDExecution1FinishEnd -> DeleteOverdueOrderSSDCallMessage1ReturnReceivingEnd DeleteOverdueOrderSSDCallMessage1)
		CallMessage::DeleteOverdueOrderSSDCallMessage3(deleteOverdueOrder DeleteOverdueOrderSSDCallMessage3SendingEnd -> DeleteOverdueOrderSSDExecution2StartEnd)
		ReturnMessage::DeleteOverdueOrderSSDCallMessage3Return(DeleteOverdueOrderSSDExecution2FinishEnd -> DeleteOverdueOrderSSDCallMessage3ReturnReceivingEnd DeleteOverdueOrderSSDCallMessage3)

		Execution::DeleteOverdueOrderSSDExecution1(DeleteOverdueOrderService DeleteOverdueOrderSSDExecution1StartEnd DeleteOverdueOrderSSDExecution1FinishEnd)
		Execution::DeleteOverdueOrderSSDExecution2(DeleteOverdueOrderService DeleteOverdueOrderSSDExecution2StartEnd DeleteOverdueOrderSSDExecution2FinishEnd)

		MessageEnd::DeleteOverdueOrderSSDCallMessage1SendingEnd(Administrator DeleteOverdueOrderSSDCallMessage1)
		ExecutionEnd::DeleteOverdueOrderSSDExecution1StartEnd(DeleteOverdueOrderService DeleteOverdueOrderSSDExecution1)
		ExecutionEnd::DeleteOverdueOrderSSDExecution1FinishEnd(DeleteOverdueOrderService DeleteOverdueOrderSSDExecution1)
		MessageEnd::DeleteOverdueOrderSSDCallMessage1ReturnReceivingEnd(Administrator DeleteOverdueOrderSSDCallMessage1Return)
		MessageEnd::DeleteOverdueOrderSSDCallMessage3SendingEnd(Administrator DeleteOverdueOrderSSDCallMessage3)
		ExecutionEnd::DeleteOverdueOrderSSDExecution2StartEnd(DeleteOverdueOrderService DeleteOverdueOrderSSDExecution2)
		ExecutionEnd::DeleteOverdueOrderSSDExecution2FinishEnd(DeleteOverdueOrderService DeleteOverdueOrderSSDExecution2)
		MessageEnd::DeleteOverdueOrderSSDCallMessage3ReturnReceivingEnd(Administrator DeleteOverdueOrderSSDCallMessage3Return)

	}

	Service TrainTicketSystem {

		[Operation]
		queryInformation(startStation, endStation, time)
		cancelTrip(ticketId, accoutId)

	}

	Service ThirdPartyServices {

		[Operation]
		sendNotification(phoneNumber)

	}

	Service BuyTicketService{

		[Operation]
		buyTicket(accoutId, routeId, seatId, price, ticketId)
		saveOrder(orderId, boughtTime)
		pay()

		[TempProperty]
		CurrentOrder : Order
		CurrentAccoutId : String
		CurrentTicket : Ticket

	}

	Service QueryOrderService{

		[Operation]
		queryByAccoutId(accoutId)
		queryTicketId(ticketId)

		[TempProperty]
		CurrentQueryMethod : QueryMethod[ACCOUT|TICKET]

	}

	Service ManageRouteCRUDService {

		[Operation]
		createRoute(routeid, startstation, endstation, time, trainid)
		queryRoute(routeid)
		modifyRoute(routeid, startstation, endstation, time, trainid)
		deleteRoute(routeid)

	}

	Service ManageTrainCRUDService {

		[Operation]
		createTrain(trainid, name, traintype)
		queryTrain(trainid)
		modifyTrain(trainid, name, traintype)
		deleteTrain(trainid)

	}

	Service ManageTicketCRUDService {

		[Operation]
		createTicket(ticketid, routeid, seatid, price, isvalid)
		queryTicket(ticketid)
		modifyTicket(ticketid, routeid, seatid, price, isvalid)
		deleteTicket(ticketid)

	}

	Service ManageOrderCRUDService {

		[Operation]
		createOrder(orderid, ticketid, accoutid, createtime, orderstatus)
		queryOrder(orderid)
		modifyOrder(orderid, ticketid, accoutid, createtime, orderstatus)
		deleteOrder(orderid)

	}

	Service ManageAccoutCRUDService {

		[Operation]
		createAccout(accoutid, name, phonenumber)
		queryAccout(accoutid)
		modifyAccout(accoutid, name, phonenumber)
		deleteAccout(accoutid)

	}

	Service ManageSeatCRUDService {

		[Operation]
		createSeat(seatid, trainid, seattype)
		querySeat(seatid)
		modifySeat(seatid, trainid, seattype)
		deleteSeat(seatid)

	}

	Service ModifyTripService {

		[Operation]
		updateTicket(accoutId, ticketId, newRouteId, price, seatId)
		updateOrder(time)
		payDifference()

		[TempProperty]
		CurrentOrder : Order
		CurrentTicket : Ticket

	}

	Service DeleteOverdueOrderService {

		[Operation]
		deleteOverdueTicket(ticketId)
		deleteOverdueOrder()

		[TempProperty]
		CurrentTicketId : String

	}

//entity create operation 
/* Generated by RM2Doc
create route
The parameter <routeid> is used to find the route
null
null
null
The parameter <trainid> is used to find the train
Return true
*/
	Contract  ManageRouteCRUDService::createRoute(routeid : String, startstation : String, endstation : String, time : String, trainid : String) : Boolean {

/*
Generated by RM2Doc - Definition
route is the object rou in the instance set of class Route. rou represents an object of class Route, and rou meets:
    The attribute RouteId of the object rou is equal to routeid
train is the object tra in the instance set of class Train. tra represents an object of class Train, and tra meets:
    The attribute TrainId of the object tra is equal to trainid
*/
		definition:
			route:Route = Route.allInstance()->any(rou:Route | rou.RouteId = routeid),
			train:Train = Train.allInstance()->any(tra:Train | tra.TrainId = trainid)

/*
Generated by RM2Doc - Precondition
The object route doesn't exist
The object train exists
*/
		precondition:
			route.oclIsUndefined() = true and
			train.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
rou represented the object of class Route
The object rou was created
The attribute RouteId of the object rou became routeid
The attribute StartStation of the object rou became startstation
The attribute EndStation of the object rou became endstation
The attribute Time of the object rou became time
The attribute TrainId of the object rou became trainid
The object rou was put into the instance set of class Route
The return value was true
*/
		postcondition:
			let rou:Route in
			rou.oclIsNew() and
			rou.RouteId = routeid and
			rou.StartStation = startstation and
			rou.EndStation = endstation and
			rou.Time = time and
			rou.TrainId = trainid and
			Route.allInstance()->includes(rou) and
			result = true
	}

//entity query operation 
/* Generated by RM2Doc
query route
The parameter <routeid> is used to find the route
Return the route
*/
	Contract  ManageRouteCRUDService::queryRoute(routeid : String) : Route {

/*
Generated by RM2Doc - Definition
route is the object rou in the instance set of class Route. rou represents an object of class Route, and rou meets:
    The attribute RouteId of the object rou is equal to routeid
*/
		definition:
			route:Route = Route.allInstance()->any(rou:Route | rou.RouteId = routeid)

/*
Generated by RM2Doc - Precondition
The object route exists
*/
		precondition:
			route.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The return value was route
*/
		postcondition:
			result = route
	}

//entity modify operation 
/* Generated by RM2Doc
modify route
The parameter <routeid> is used to find the route
null
null
null
null
Return true
*/
	Contract  ManageRouteCRUDService::modifyRoute(routeid : String, startstation : String, endstation : String, time : String, trainid : String) : Boolean {

/*
Generated by RM2Doc - Definition
route is the object rou in the instance set of class Route. rou represents an object of class Route, and rou meets:
    The attribute RouteId of the object rou is equal to routeid
*/
		definition:
			route:Route = Route.allInstance()->any(rou:Route | rou.RouteId = routeid)

/*
Generated by RM2Doc - Precondition
The object route exists
*/
		precondition:
			route.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The attribute RouteId of the object route became routeid
The attribute StartStation of the object route became startstation
The attribute EndStation of the object route became endstation
The attribute Time of the object route became time
The attribute TrainId of the object route became trainid
The return value was true
*/
		postcondition:
			route.RouteId = routeid and
			route.StartStation = startstation and
			route.EndStation = endstation and
			route.Time = time and
			route.TrainId = trainid and
			result = true
	}

//entity delete operation 
/* Generated by RM2Doc
delete route
The parameter <routeid> is used to find the route
Return true
*/
	Contract  ManageRouteCRUDService::deleteRoute(routeid : String) : Boolean {

/*
Generated by RM2Doc - Definition
route is the object rou in the instance set of class Route. rou represents an object of class Route, and rou meets:
    The attribute RouteId of the object rou is equal to routeid
*/
		definition:
			route:Route = Route.allInstance()->any(rou:Route | rou.RouteId = routeid)

/*
Generated by RM2Doc - Precondition
The object route exists
The object route is in the instance set of class Route
*/
		precondition:
			route.oclIsUndefined() = false and
			Route.allInstance()->includes(route)

/*
Generated by RM2Doc - Postcondition
The object route was deleted from the instance set of class Route
The return value was true
*/
		postcondition:
			Route.allInstance()->excludes(route) and
			result = true
	}

//entity create operation 
/* Generated by RM2Doc
create train
The parameter <trainid> is used to find the train
null
null
Return true
*/
	Contract  ManageTrainCRUDService::createTrain(trainid : String, name : String, traintype : TrainType[G|D|Z|T|A|L]) : Boolean {

/*
Generated by RM2Doc - Definition
train is the object tra in the instance set of class Train. tra represents an object of class Train, and tra meets:
    The attribute TrainId of the object tra is equal to trainid
*/
		definition:
			train:Train = Train.allInstance()->any(tra:Train | tra.TrainId = trainid)

/*
Generated by RM2Doc - Precondition
The object train doesn't exist
*/
		precondition:
			train.oclIsUndefined() = true

/*
Generated by RM2Doc - Postcondition
tra represented the object of class Train
The object tra was created
The attribute TrainId of the object tra became trainid
The attribute Name of the object tra became name
The attribute TrainType of the object tra became traintype
The object tra was put into the instance set of class Train
The return value was true
*/
		postcondition:
			let tra:Train in
			tra.oclIsNew() and
			tra.TrainId = trainid and
			tra.Name = name and
			tra.TrainType = traintype and
			Train.allInstance()->includes(tra) and
			result = true
	}

//entity query operation 
/* Generated by RM2Doc
query train
The parameter <trainid> is used to find the train
Return the train
*/
	Contract  ManageTrainCRUDService::queryTrain(trainid : String) : Train {

/*
Generated by RM2Doc - Definition
train is the object tra in the instance set of class Train. tra represents an object of class Train, and tra meets:
    The attribute TrainId of the object tra is equal to trainid
*/
		definition:
			train:Train = Train.allInstance()->any(tra:Train | tra.TrainId = trainid)

/*
Generated by RM2Doc - Precondition
The object train exists
*/
		precondition:
			train.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The return value was train
*/
		postcondition:
			result = train
	}

//entity modify operation 
/* Generated by RM2Doc
modify train
The parameter <trainid> is used to find the train
null
null
Return true
*/
	Contract  ManageTrainCRUDService::modifyTrain(trainid : String, name : String, traintype : TrainType[G|D|Z|T|A|L]) : Boolean {

/*
Generated by RM2Doc - Definition
train is the object tra in the instance set of class Train. tra represents an object of class Train, and tra meets:
    The attribute TrainId of the object tra is equal to trainid
*/
		definition:
			train:Train = Train.allInstance()->any(tra:Train | tra.TrainId = trainid)

/*
Generated by RM2Doc - Precondition
The object train exists
*/
		precondition:
			train.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The attribute TrainId of the object train became trainid
The attribute Name of the object train became name
The attribute TrainType of the object train became traintype
The return value was true
*/
		postcondition:
			train.TrainId = trainid and
			train.Name = name and
			train.TrainType = traintype and
			result = true
	}

//entity delete operation 
/* Generated by RM2Doc
delete train
The parameter <trainid> is used to find the train
Return true
*/
	Contract  ManageTrainCRUDService::deleteTrain(trainid : String) : Boolean {

/*
Generated by RM2Doc - Definition
train is the object tra in the instance set of class Train. tra represents an object of class Train, and tra meets:
    The attribute TrainId of the object tra is equal to trainid
*/
		definition:
			train:Train = Train.allInstance()->any(tra:Train | tra.TrainId = trainid)

/*
Generated by RM2Doc - Precondition
The object train exists
The object train is in the instance set of class Train
*/
		precondition:
			train.oclIsUndefined() = false and
			Train.allInstance()->includes(train)

/*
Generated by RM2Doc - Postcondition
The object train was deleted from the instance set of class Train
The return value was true
*/
		postcondition:
			Train.allInstance()->excludes(train) and
			result = true
	}

//entity create operation 
/* Generated by RM2Doc
create ticket
The parameter <ticketid> is used to find the ticket
null
null
null
null
Return true
*/
	Contract  ManageTicketCRUDService::createTicket(ticketid : String, routeid : String, seatid : String, price : Real, isvalid : Boolean) : Boolean {

/*
Generated by RM2Doc - Definition
ticket is the object tic in the instance set of class Ticket. tic represents an object of class Ticket, and tic meets:
    The attribute TicketId of the object tic is equal to ticketid
*/
		definition:
			ticket:Ticket = Ticket.allInstance()->any(tic:Ticket | tic.TicketId = ticketid)

/*
Generated by RM2Doc - Precondition
The object ticket doesn't exist
*/
		precondition:
			ticket.oclIsUndefined() = true

/*
Generated by RM2Doc - Postcondition
tic represented the object of class Ticket
The object tic was created
The attribute TicketId of the object tic became ticketid
The attribute RouteId of the object tic became routeid
The attribute SeatId of the object tic became seatid
The attribute Price of the object tic became price
The attribute IsValid of the object tic became isvalid
The object tic was put into the instance set of class Ticket
The return value was true
*/
		postcondition:
			let tic:Ticket in
			tic.oclIsNew() and
			tic.TicketId = ticketid and
			tic.RouteId = routeid and
			tic.SeatId = seatid and
			tic.Price = price and
			tic.IsValid = isvalid and
			Ticket.allInstance()->includes(tic) and
			result = true
	}

//entity query operation 
/* Generated by RM2Doc
query ticket
The parameter <ticketid> is used to find the ticket
Return the ticket
*/
	Contract  ManageTicketCRUDService::queryTicket(ticketid : String) : Ticket {

/*
Generated by RM2Doc - Definition
ticket is the object tic in the instance set of class Ticket. tic represents an object of class Ticket, and tic meets:
    The attribute TicketId of the object tic is equal to ticketid
*/
		definition:
			ticket:Ticket = Ticket.allInstance()->any(tic:Ticket | tic.TicketId = ticketid)

/*
Generated by RM2Doc - Precondition
The object ticket exists
*/
		precondition:
			ticket.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The return value was ticket
*/
		postcondition:
			result = ticket
	}

//entity modify operation 
/* Generated by RM2Doc
modify ticket
The parameter <ticketid> is used to find the ticket
null
null
null
null
Return true
*/
	Contract  ManageTicketCRUDService::modifyTicket(ticketid : String, routeid : String, seatid : String, price : Real, isvalid : Boolean) : Boolean {

/*
Generated by RM2Doc - Definition
ticket is the object tic in the instance set of class Ticket. tic represents an object of class Ticket, and tic meets:
    The attribute TicketId of the object tic is equal to ticketid
*/
		definition:
			ticket:Ticket = Ticket.allInstance()->any(tic:Ticket | tic.TicketId = ticketid)

/*
Generated by RM2Doc - Precondition
The object ticket exists
*/
		precondition:
			ticket.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The attribute TicketId of the object ticket became ticketid
The attribute RouteId of the object ticket became routeid
The attribute SeatId of the object ticket became seatid
The attribute Price of the object ticket became price
The attribute IsValid of the object ticket became isvalid
The return value was true
*/
		postcondition:
			ticket.TicketId = ticketid and
			ticket.RouteId = routeid and
			ticket.SeatId = seatid and
			ticket.Price = price and
			ticket.IsValid = isvalid and
			result = true
	}

//entity delete operation 
/* Generated by RM2Doc
delete ticket
The parameter <ticketid> is used to find the ticket
Return true
*/
	Contract  ManageTicketCRUDService::deleteTicket(ticketid : String) : Boolean {

/*
Generated by RM2Doc - Definition
ticket is the object tic in the instance set of class Ticket. tic represents an object of class Ticket, and tic meets:
    The attribute TicketId of the object tic is equal to ticketid
*/
		definition:
			ticket:Ticket = Ticket.allInstance()->any(tic:Ticket | tic.TicketId = ticketid)

/*
Generated by RM2Doc - Precondition
The object ticket exists
The object ticket is in the instance set of class Ticket
*/
		precondition:
			ticket.oclIsUndefined() = false and
			Ticket.allInstance()->includes(ticket)

/*
Generated by RM2Doc - Postcondition
The object ticket was deleted from the instance set of class Ticket
The return value was true
*/
		postcondition:
			Ticket.allInstance()->excludes(ticket) and
			result = true
	}

//entity create operation 
/* Generated by RM2Doc
create order
The parameter <orderid> is used to find the order
null
null
null
null
Return true
*/
	Contract  ManageOrderCRUDService::createOrder(orderid : String, ticketid : String, accoutid : String, createtime : String, orderstatus : OrderStatus[NOTPAID|PAID|CANCELED]) : Boolean {

/*
Generated by RM2Doc - Definition
order is the object ord in the instance set of class Order. ord represents an object of class Order, and ord meets:
    The attribute OrderId of the object ord is equal to orderid
*/
		definition:
			order:Order = Order.allInstance()->any(ord:Order | ord.OrderId = orderid)

/*
Generated by RM2Doc - Precondition
The object order doesn't exist
*/
		precondition:
			order.oclIsUndefined() = true

/*
Generated by RM2Doc - Postcondition
ord represented the object of class Order
The object ord was created
The attribute OrderId of the object ord became orderid
The attribute TicketId of the object ord became ticketid
The attribute AccoutId of the object ord became accoutid
The attribute CreateTime of the object ord became createtime
The attribute OrderStatus of the object ord became orderstatus
The object ord was put into the instance set of class Order
The return value was true
*/
		postcondition:
			let ord:Order in
			ord.oclIsNew() and
			ord.OrderId = orderid and
			ord.TicketId = ticketid and
			ord.AccoutId = accoutid and
			ord.CreateTime = createtime and
			ord.OrderStatus = orderstatus and
			Order.allInstance()->includes(ord) and
			result = true
	}

//entity query operation 
/* Generated by RM2Doc
query order
The parameter <orderid> is used to find the order
Return the order
*/
	Contract  ManageOrderCRUDService::queryOrder(orderid : String) : Order {

/*
Generated by RM2Doc - Definition
order is the object ord in the instance set of class Order. ord represents an object of class Order, and ord meets:
    The attribute OrderId of the object ord is equal to orderid
*/
		definition:
			order:Order = Order.allInstance()->any(ord:Order | ord.OrderId = orderid)

/*
Generated by RM2Doc - Precondition
The object order exists
*/
		precondition:
			order.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The return value was order
*/
		postcondition:
			result = order
	}

//entity modify operation 
/* Generated by RM2Doc
modify order
The parameter <orderid> is used to find the order
null
null
null
null
Return true
*/
	Contract  ManageOrderCRUDService::modifyOrder(orderid : String, ticketid : String, accoutid : String, createtime : String, orderstatus : OrderStatus[NOTPAID|PAID|CANCELED]) : Boolean {

/*
Generated by RM2Doc - Definition
order is the object ord in the instance set of class Order. ord represents an object of class Order, and ord meets:
    The attribute OrderId of the object ord is equal to orderid
*/
		definition:
			order:Order = Order.allInstance()->any(ord:Order | ord.OrderId = orderid)

/*
Generated by RM2Doc - Precondition
The object order exists
*/
		precondition:
			order.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The attribute OrderId of the object order became orderid
The attribute TicketId of the object order became ticketid
The attribute AccoutId of the object order became accoutid
The attribute CreateTime of the object order became createtime
The attribute OrderStatus of the object order became orderstatus
The return value was true
*/
		postcondition:
			order.OrderId = orderid and
			order.TicketId = ticketid and
			order.AccoutId = accoutid and
			order.CreateTime = createtime and
			order.OrderStatus = orderstatus and
			result = true
	}

//entity delete operation 
/* Generated by RM2Doc
delete order
The parameter <orderid> is used to find the order
Return true
*/
	Contract  ManageOrderCRUDService::deleteOrder(orderid : String) : Boolean {

/*
Generated by RM2Doc - Definition
order is the object ord in the instance set of class Order. ord represents an object of class Order, and ord meets:
    The attribute OrderId of the object ord is equal to orderid
*/
		definition:
			order:Order = Order.allInstance()->any(ord:Order | ord.OrderId = orderid)

/*
Generated by RM2Doc - Precondition
The object order exists
The object order is in the instance set of class Order
*/
		precondition:
			order.oclIsUndefined() = false and
			Order.allInstance()->includes(order)

/*
Generated by RM2Doc - Postcondition
The object order was deleted from the instance set of class Order
The return value was true
*/
		postcondition:
			Order.allInstance()->excludes(order) and
			result = true
	}

//entity create operation 
/* Generated by RM2Doc
create accout
The parameter <accoutid> is used to find the accout
null
null
Return true
*/
	Contract  ManageAccoutCRUDService::createAccout(accoutid : String, name : String, phonenumber : String) : Boolean {

/*
Generated by RM2Doc - Definition
accout is the object acc in the instance set of class Accout. acc represents an object of class Accout, and acc meets:
    The attribute AccoutId of the object acc is equal to accoutid
*/
		definition:
			accout:Accout = Accout.allInstance()->any(acc:Accout | acc.AccoutId = accoutid)

/*
Generated by RM2Doc - Precondition
The object accout doesn't exist
*/
		precondition:
			accout.oclIsUndefined() = true

/*
Generated by RM2Doc - Postcondition
acc represented the object of class Accout
The object acc was created
The attribute AccoutId of the object acc became accoutid
The attribute Name of the object acc became name
The attribute PhoneNumber of the object acc became phonenumber
The object acc was put into the instance set of class Accout
The return value was true
*/
		postcondition:
			let acc:Accout in
			acc.oclIsNew() and
			acc.AccoutId = accoutid and
			acc.Name = name and
			acc.PhoneNumber = phonenumber and
			Accout.allInstance()->includes(acc) and
			result = true
	}

//entity query operation 
/* Generated by RM2Doc
query accout
The parameter <accoutid> is used to find the accout
Return the accout
*/
	Contract  ManageAccoutCRUDService::queryAccout(accoutid : String) : Accout {

/*
Generated by RM2Doc - Definition
accout is the object acc in the instance set of class Accout. acc represents an object of class Accout, and acc meets:
    The attribute AccoutId of the object acc is equal to accoutid
*/
		definition:
			accout:Accout = Accout.allInstance()->any(acc:Accout | acc.AccoutId = accoutid)

/*
Generated by RM2Doc - Precondition
The object accout exists
*/
		precondition:
			accout.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The return value was accout
*/
		postcondition:
			result = accout
	}

//entity modify operation 
/* Generated by RM2Doc
modify accout
The parameter <accoutid> is used to find the accout
null
null
Return true
*/
	Contract  ManageAccoutCRUDService::modifyAccout(accoutid : String, name : String, phonenumber : String) : Boolean {

/*
Generated by RM2Doc - Definition
accout is the object acc in the instance set of class Accout. acc represents an object of class Accout, and acc meets:
    The attribute AccoutId of the object acc is equal to accoutid
*/
		definition:
			accout:Accout = Accout.allInstance()->any(acc:Accout | acc.AccoutId = accoutid)

/*
Generated by RM2Doc - Precondition
The object accout exists
*/
		precondition:
			accout.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The attribute AccoutId of the object accout became accoutid
The attribute Name of the object accout became name
The attribute PhoneNumber of the object accout became phonenumber
The return value was true
*/
		postcondition:
			accout.AccoutId = accoutid and
			accout.Name = name and
			accout.PhoneNumber = phonenumber and
			result = true
	}

//entity delete operation 
/* Generated by RM2Doc
delete accout
The parameter <accoutid> is used to find the accout
Return true
*/
	Contract  ManageAccoutCRUDService::deleteAccout(accoutid : String) : Boolean {

/*
Generated by RM2Doc - Definition
accout is the object acc in the instance set of class Accout. acc represents an object of class Accout, and acc meets:
    The attribute AccoutId of the object acc is equal to accoutid
*/
		definition:
			accout:Accout = Accout.allInstance()->any(acc:Accout | acc.AccoutId = accoutid)

/*
Generated by RM2Doc - Precondition
The object accout exists
The object accout is in the instance set of class Accout
*/
		precondition:
			accout.oclIsUndefined() = false and
			Accout.allInstance()->includes(accout)

/*
Generated by RM2Doc - Postcondition
The object accout was deleted from the instance set of class Accout
The return value was true
*/
		postcondition:
			Accout.allInstance()->excludes(accout) and
			result = true
	}

//entity create operation 
/* Generated by RM2Doc
create seat
The parameter <seatid> is used to find the seat
The parameter <trainid> is used to find the train
null
Return true
*/
	Contract  ManageSeatCRUDService::createSeat(seatid : String, trainid : String, seattype : SeatType[HARDBED|SOFTBED|SEAT|STAND]) : Boolean {

/*
Generated by RM2Doc - Definition
seat is the object sea in the instance set of class Seat. sea represents an object of class Seat, and sea meets:
    The attribute SeatId of the object sea is equal to seatid
train is the object tra in the instance set of class Train. tra represents an object of class Train, and tra meets:
    The attribute TrainId of the object tra is equal to trainid
*/
		definition:
			seat:Seat = Seat.allInstance()->any(sea:Seat | sea.SeatId = seatid),
			train:Train = Train.allInstance()->any(tra:Train | tra.TrainId = trainid)

/*
Generated by RM2Doc - Precondition
The object seat doesn't exist
The object train exists
*/
		precondition:
			seat.oclIsUndefined() = true and
			train.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
sea represented the object of class Seat
The object sea was created
The attribute SeatId of the object sea became seatid
The attribute TrainId of the object sea became trainid
The attribute SeatType of the object sea became seattype
The object sea was put into the instance set of class Seat
The return value was true
*/
		postcondition:
			let sea:Seat in
			sea.oclIsNew() and
			sea.SeatId = seatid and
			sea.TrainId = trainid and
			sea.SeatType = seattype and
			Seat.allInstance()->includes(sea) and
			result = true
	}

//entity query operation 
/* Generated by RM2Doc
query seat
The parameter <seatid> is used to find the seat
Return the seat
*/
	Contract  ManageSeatCRUDService::querySeat(seatid : String) : Seat {

/*
Generated by RM2Doc - Definition
seat is the object sea in the instance set of class Seat. sea represents an object of class Seat, and sea meets:
    The attribute SeatId of the object sea is equal to seatid
*/
		definition:
			seat:Seat = Seat.allInstance()->any(sea:Seat | sea.SeatId = seatid)

/*
Generated by RM2Doc - Precondition
The object seat exists
*/
		precondition:
			seat.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The return value was seat
*/
		postcondition:
			result = seat
	}

//entity modify operation 
/* Generated by RM2Doc
modify seat
The parameter <seatid> is used to find the seat
The parameter <trainid> is used to find the train
null
Return true
*/
	Contract  ManageSeatCRUDService::modifySeat(seatid : String, trainid : String, seattype : SeatType[HARDBED|SOFTBED|SEAT|STAND]) : Boolean {

/*
Generated by RM2Doc - Definition
seat is the object sea in the instance set of class Seat. sea represents an object of class Seat, and sea meets:
    The attribute SeatId of the object sea is equal to seatid
train is the object tra in the instance set of class Train. tra represents an object of class Train, and tra meets:
    The attribute TrainId of the object tra is equal to trainid
*/
		definition:
			seat:Seat = Seat.allInstance()->any(sea:Seat | sea.SeatId = seatid),
			train:Train = Train.allInstance()->any(tra:Train | tra.TrainId = trainid)

/*
Generated by RM2Doc - Precondition
The object seat exists
The object train exists
*/
		precondition:
			seat.oclIsUndefined() = false and
			train.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The attribute SeatId of the object seat became seatid
The attribute TrainId of the object seat became trainid
The attribute SeatType of the object seat became seattype
The return value was true
*/
		postcondition:
			seat.SeatId = seatid and
			seat.TrainId = trainid and
			seat.SeatType = seattype and
			result = true
	}

//entity delete operation 
/* Generated by RM2Doc
delete seat
The parameter <seatid> is used to find the seat
Return true
*/
	Contract  ManageSeatCRUDService::deleteSeat(seatid : String) : Boolean {

/*
Generated by RM2Doc - Definition
seat is the object sea in the instance set of class Seat. sea represents an object of class Seat, and sea meets:
    The attribute SeatId of the object sea is equal to seatid
*/
		definition:
			seat:Seat = Seat.allInstance()->any(sea:Seat | sea.SeatId = seatid)

/*
Generated by RM2Doc - Precondition
The object seat exists
The object seat is in the instance set of class Seat
*/
		precondition:
			seat.oclIsUndefined() = false and
			Seat.allInstance()->includes(seat)

/*
Generated by RM2Doc - Postcondition
The object seat was deleted from the instance set of class Seat
The return value was true
*/
		postcondition:
			Seat.allInstance()->excludes(seat) and
			result = true
	}

/* Generated by RM2Doc
buy ticket
The parameter <accoutId> is used to find the accout
The parameter <routeId> is used to find the route
The parameter <seatId> is used to find the seat
null
The parameter <ticketId> is used to find the ticket
Return true
*/
	Contract BuyTicketService::buyTicket(accoutId : String, routeId : String, seatId : String, price : Real, ticketId : String) : Boolean {

/*
Generated by RM2Doc - Definition
route is the object rou in the instance set of class Route. rou represents an object of class Route, and rou meets:
    The attribute RouteId of the object rou is equal to routeId
accout is the object acc in the instance set of class Accout. acc represents an object of class Accout, and acc meets:
    The attribute AccoutId of the object acc is equal to accoutId
seat is the object sea in the instance set of class Seat. sea represents an object of class Seat, and sea meets:
    The attribute SeatId of the object sea is equal to seatId
ticket is the object tic in the instance set of class Ticket. tic represents an object of class Ticket, and tic meets:
    The attribute TicketId of the object tic is equal to ticketId
*/
		definition:
			route:Route = Route.allInstance()->any(rou:Route | rou.RouteId = routeId),
			accout:Accout = Accout.allInstance()->any(acc:Accout | acc.AccoutId = accoutId),
			seat:Seat = Seat.allInstance()->any(sea:Seat | sea.SeatId = seatId),
			ticket:Ticket = Ticket.allInstance()->any(tic:Ticket | tic.TicketId = ticketId)

/*
Generated by RM2Doc - Precondition
The object route exists
The object accout exists
The object seat exists
The object ticket doesn't exist
*/
		precondition:
			route.oclIsUndefined() = false and
			accout.oclIsUndefined() = false and
			seat.oclIsUndefined() = false and
			ticket.oclIsUndefined() = true
/*
Generated by RM2Doc - Postcondition
tic represented the object of class Ticket
The object tic was created
The attribute TicketId of the object tic became ticketId
The attribute RouteId of the object tic became routeId
The attribute SeatId of the object tic became seatId
The attribute Price of the object tic became price
The attribute IsValid of the object tic became false
The object tic was put into the instance set of class Ticket
The object CurrentTicket became tic
The value of temporary variable CurrentAccoutId became accoutId
The return value was true
*/
		postcondition:
			let tic:Ticket in
			tic.oclIsNew() and
			tic.TicketId = ticketId and
			tic.RouteId = routeId and
			tic.SeatId = seatId and
			tic.Price = price and
			tic.IsValid = false and
			Ticket.allInstance()->includes(tic) and
			self.CurrentTicket = tic and
			self.CurrentAccoutId = accoutId and
			result = true
	}

/* Generated by RM2Doc
save order
The parameter <orderId> is used to find the order
null
Return true
*/
	Contract BuyTicketService::saveOrder(orderId : String, boughtTime : String) : Boolean {

/*
Generated by RM2Doc - Definition
order is the object ord in the instance set of class Order. ord represents an object of class Order, and ord meets:
    The attribute OrderId of the object ord is equal to orderId
*/
		definition:
			order:Order = Order.allInstance()->any(ord:Order | ord.OrderId = orderId)

/*
Generated by RM2Doc - Precondition
The object order doesn't exist
*/
		precondition:
			order.oclIsUndefined() = true
/*
Generated by RM2Doc - Postcondition
ord represented the object of class Order
The object ord was created
The attribute OrderId of the object ord became orderId
The attribute TicketId of the object ord became the attribute TicketId of the object CurrentTicket
The attribute AccoutId of the object ord became the value of temporary variable CurrentAccoutId
The attribute CreateTime of the object ord became boughtTime
The attribute OrderStatus of the object ord became NOTPAID
The object CurrentOrder became ord
The object ord was put into the instance set of class Order
The return value was true
*/
		postcondition:
			let ord:Order in
			ord.oclIsNew() and
			ord.OrderId = orderId and
			ord.TicketId = self.CurrentTicket.TicketId and
			ord.AccoutId = self.CurrentAccoutId and
			ord.CreateTime = boughtTime and
			ord.OrderStatus = OrderStatus::NOTPAID and
			self.CurrentOrder = ord and
			Order.allInstance()->includes(ord) and
			result = true
	}

/* Generated by RM2Doc
pay
Return true
*/
	Contract BuyTicketService::pay() : Boolean {

/*
Generated by RM2Doc - Precondition
None
*/
		precondition:
			true
/*
Generated by RM2Doc - Postcondition
The attribute isValid of the object CurrentTicket became true
The attribute OrderStatus of the object CurrentOrder became PAID
The return value was true
*/
		postcondition:
			self.CurrentTicket.isValid = true and
			self.CurrentOrder.OrderStatus = OrderStatus::PAID and
			result = true

	}

/* Generated by RM2Doc
query information
null
null
null
Return the route(s) whose start station is equal to <startStation>, end station is equal to <endStation>and time is equal to <time>
*/
	Contract TrainTicketSystem::queryInformation(startStation : String, endStation : String, time : String) : Set(Route) {

/*
Generated by RM2Doc - Precondition
None
*/
		precondition:
			true
/*
Generated by RM2Doc - Postcondition
The return value was the set of class Route, including all route in the instance set of class Route. route represented an object of class Route, and route meet:
    The attribute StartStation of the object route was equal to startStation
    The attribute EndStation of the object route was equal to endStation
    The attribute Time of the object route was equal to time
*/
		postcondition:
			result = Route.allInstance()->select(route:Route | route.StartStation = startStation and route.EndStation = endStation and route.Time = time)
	}

/* Generated by RM2Doc
cancel trip
The parameter <ticketId> is used to find the ticket
The parameter <accoutId> is used to find the accout
Return true
*/
	Contract TrainTicketSystem::cancelTrip(ticketId : String, accoutId : String) : Boolean {

/*
Generated by RM2Doc - Definition
ticket is the object tic in the instance set of class Ticket. tic represents an object of class Ticket, and tic meets:
    The attribute TicketId of the object tic is equal to ticketId
accout is the object acc in the instance set of class Accout. acc represents an object of class Accout, and acc meets:
    The attribute AccoutId of the object acc is equal to accoutId
order is the object ord in the instance set of class Order. ord represents an object of class Order, and ord meets:
    The attribute TicketId of the object ord is equal to ticketId
    The attribute AccoutId of the object ord is equal to accoutId
    The attribute OrderStatus of the object ord is equal to PAID
*/
		definition:
			ticket:Ticket = Ticket.allInstance()->any(tic:Ticket | tic.TicketId = ticketId),
			accout:Accout = Accout.allInstance()->any(acc:Accout | acc.AccoutId = accoutId),
			order:Order = Order.allInstance()->any(ord:Order | ord.TicketId = ticketId and ord.AccoutId = accoutId and ord.OrderStatus = OrderStatus::PAID)

/*
Generated by RM2Doc - Precondition
The object ticket exists
The object accout exists
The object order exists
*/
		precondition:
//			true
			ticket.oclIsUndefined() = false and
			accout.oclIsUndefined() = false and
			order.oclIsUndefined() = false
/*
Generated by RM2Doc - Postcondition
The attribute IsValid of the object ticket became false
The attribute OrderStatus of the object order became CANCELED
The return value was true
*/
		postcondition:
			ticket.IsValid = false and
			order.OrderStatus = OrderStatus::CANCELED and
			result = true
	}

/* Generated by RM2Doc
query by accout id
The parameter <accoutId> is used to find the accout
Return the order(s) whose accout id is equal to <accoutId>
*/
	Contract QueryOrderService::queryByAccoutId(accoutId : String) : Set(Order) {

/*
Generated by RM2Doc - Definition
accout is the object acc in the instance set of class Accout. acc represents an object of class Accout, and acc meets:
    The attribute AccoutId of the object acc is equal to accoutId
*/
		definition:
			accout:Accout = Accout.allInstance()->any(acc:Accout | acc.AccoutId = accoutId)

/*
Generated by RM2Doc - Precondition
The object accout exists
*/
		precondition:
			accout.oclIsUndefined() = false
/*
Generated by RM2Doc - Postcondition
The return value was the set of class Order, including all order in the instance set of class Order. order represented an object of class Order, and order meet:
    The attribute AccoutId of the object order was equal to accoutId
*/
		postcondition:
			result = Order.allInstance()->select(order:Order | order.AccoutId = accoutId)
	}

/* Generated by RM2Doc
query ticket id
The parameter <ticketId> is used to find the ticket
Return the order(s) whose ticket id is equal to <ticketId>
*/
	Contract QueryOrderService::queryTicketId(ticketId : String) : Set(Order) {

/*
Generated by RM2Doc - Definition
ticket is the object tic in the instance set of class Ticket. tic represents an object of class Ticket, and tic meets:
    The attribute TicketId of the object tic is equal to ticketId
*/
		definition:
			ticket:Ticket = Ticket.allInstance()->any(tic:Ticket | tic.TicketId = ticketId)

/*
Generated by RM2Doc - Precondition
The object ticket exists
*/
		precondition:
			ticket.oclIsUndefined() = false
/*
Generated by RM2Doc - Postcondition
The return value was the set of class Order, including all order in the instance set of class Order. order represented an object of class Order, and order meet:
    The attribute TicketId of the object order was equal to ticketId
*/
		postcondition:
			result = Order.allInstance()->select(order:Order | order.TicketId = ticketId)
	}

/* Generated by RM2Doc
update ticket
The parameter <accoutId> is used to find the accout
null
The parameter <newRouteId> is used to find the route
null
The parameter <seatId> is used to find the seat
Return true
*/
	Contract ModifyTripService::updateTicket(accoutId : String, ticketId : String, newRouteId : String, price : Real, seatId : String): Boolean {

/*
Generated by RM2Doc - Definition
ticket is the object tic in the instance set of class Ticket. tic represents an object of class Ticket, and tic meets:
    The attribute TicketId of the object tic is equal to ticketId
    The attribute IsValid of the object tic is equal to true
accout is the object acc in the instance set of class Accout. acc represents an object of class Accout, and acc meets:
    The attribute AccoutId of the object acc is equal to accoutId
seat is the object sea in the instance set of class Seat. sea represents an object of class Seat, and sea meets:
    The attribute SeatId of the object sea is equal to seatId
route is the object rou in the instance set of class Route. rou represents an object of class Route, and rou meets:
    The attribute RouteId of the object rou is equal to newRouteId
order is the object ord in the instance set of class Order. ord represents an object of class Order, and ord meets:
    The attribute AccoutId of the object ord is equal to accoutId
    The attribute TicketId of the object ord is equal to ticketId
    The attribute OrderStatus of the object ord is equal to PAID
*/
		definition:
			ticket:Ticket = Ticket.allInstance()->any(tic:Ticket | tic.TicketId = ticketId and tic.IsValid = true),
			accout:Accout = Accout.allInstance()->any(acc:Accout | acc.AccoutId = accoutId),
			seat:Seat = Seat.allInstance()->any(sea:Seat | sea.SeatId = seatId),
			route:Route = Route.allInstance()->any(rou:Route | rou.RouteId = newRouteId),
			order:Order = Order.allInstance()->any(ord:Order | ord.AccoutId = accoutId and ord.TicketId = ticketId and ord.OrderStatus = OrderStatus::PAID)

/*
Generated by RM2Doc - Precondition
The object ticket exists
The object accout exists
The object route exists
The object seat exists
The object order exists
*/
		precondition:
			ticket.oclIsUndefined() = false and
			accout.oclIsUndefined() = false and
			route.oclIsUndefined() = false and
			seat.oclIsUndefined() = false and
			order.oclIsUndefined() = false

/*
Generated by RM2Doc - Postcondition
The attribute RouteId of the object ticket became newRouteId
The attribute SeatId of the object ticket became seatId
The attribute Price of the object ticket became price
The attribute IsValid of the object ticket became false
The object CurrentTicket became ticket
The object CurrentOrder became order
The return value was true
*/
		postcondition:
			ticket.RouteId = newRouteId and
			ticket.SeatId = seatId and
			ticket.Price = price and
			ticket.IsValid = false and
			self.CurrentTicket = ticket and
			self.CurrentOrder = order and
			result = true
	}

/* Generated by RM2Doc
update order
null
Return true
*/
	Contract ModifyTripService::updateOrder(time : String) : Boolean {

/*
Generated by RM2Doc - Precondition
None
*/
		precondition:
			true
/*
Generated by RM2Doc - Postcondition
The attribute CreateTime of the object CurrentOrder became time
The attribute OrderStatus of the object CurrentOrder became NOTPAID
The return value was true
*/
		postcondition:
			self.CurrentOrder.CreateTime = time and
			self.CurrentOrder.OrderStatus = OrderStatus::NOTPAID and
			result = true
	}

/* Generated by RM2Doc
pay difference
Return true
*/
	Contract ModifyTripService::payDifference() : Boolean {

/*
Generated by RM2Doc - Precondition
None
*/
		precondition:
			true
/*
Generated by RM2Doc - Postcondition
The attribute IsValid of the object CurrentTicket became true
The attribute OrderStatus of the object CurrentOrder became PAID
The return value was true
*/
		postcondition:
			self.CurrentTicket.IsValid = true and
			self.CurrentOrder.OrderStatus = OrderStatus::PAID and
			result = true
	}

/* Generated by RM2Doc
delete overdue ticket
null
Return true
*/
	Contract DeleteOverdueOrderService::deleteOverdueTicket(ticketId : String) : Boolean {

/*
Generated by RM2Doc - Definition
ticket is the object tic in the instance set of class Ticket. tic represents an object of class Ticket, and tic meets:
    The attribute TicketId of the object tic is equal to ticketId
    The attribute IsValid of the object tic is equal to false
*/
		definition:
			ticket:Ticket = Ticket.allInstance()->any(tic:Ticket | tic.TicketId = ticketId and tic.IsValid = false)

/*
Generated by RM2Doc - Precondition
The object ticket exists
*/
		precondition:
			ticket.oclIsUndefined() = false
/*
Generated by RM2Doc - Postcondition
The object ticket was deleted from the instance set of class Ticket
The value of temporary variable CurrentTicketId became ticketId
The return value was true
*/
		postcondition:
			Ticket.allInstance()->excludes(ticket) and
			self.CurrentTicketId = ticketId and
			result = true
	}

/* Generated by RM2Doc
delete overdue order
Return true
*/
	Contract DeleteOverdueOrderService::deleteOverdueOrder() : Boolean {

/*
Generated by RM2Doc - Definition
order is the object ord in the instance set of class Order. ord represents an object of class Order, and ord meets:
    The attribute TicketId of the object ord is equal to the value of temporary variable CurrentTicketId
    The attribute OrderStatus of the object ord is equal to CANCELED
*/
		definition:
			order:Order = Order.allInstance()->any(ord:Order | ord.TicketId = self.CurrentTicketId and ord.OrderStatus = OrderStatus::CANCELED)

/*
Generated by RM2Doc - Precondition
The object order exists
*/
		precondition:
			order.oclIsUndefined() = false
/*
Generated by RM2Doc - Postcondition
The object order was deleted from the instance set of class Order
The return value was true
*/
		postcondition:
			Order.allInstance()->excludes(order) and
			result = true
	}

/* Generated by RM2Doc
send notification
null
Return true
*/
	Contract ThirdPartyServices::sendNotification(phoneNumber : String) : Boolean {

/*
Generated by RM2Doc - Precondition
None
*/
		precondition:
			true
/*
Generated by RM2Doc - Postcondition
The return value was true
*/
		postcondition:
			result = true
	}

}

DomainModel TrainTicket {

	@AutoCRUD Entity Route {
		RouteId : String
		StartStation : String
		EndStation : String
		Time : String
		TrainId : String

		[Refer]
		InTicket : Ticket* Association
		UsedTrain : Train ! Association
	}

	@AutoCRUD Entity Train {
		TrainId : String
		Name : String
		TrainType : TrainType[G|D|Z|T|A|L]

		[Refer]
		InRoute : Route* Association
	}

	@AutoCRUD Entity Ticket {
		TicketId : String
		RouteId : String
		SeatId : String
		Price : Real
		IsValid : Boolean

		[Refer]
		HasRoute : Route ! Association
		InOrder : Order Association
		HasSeat : Seat Association
		BelongedAccout : Accout Association
	}

	@AutoCRUD Entity Order {
		OrderId : String
		TicketId : String
		AccoutId : String
		CreateTime : String
		OrderStatus : OrderStatus[NOTPAID|PAID|CANCELED]

		[Refer]
		HasTicket : Ticket ! Association
		HasAccout : Accout Association
	}

	@AutoCRUD Entity Accout {
		AccoutId : String
		Name : String
		PhoneNumber : String

		[Refer]
		AccouttoSeat : Seat ! Association
		InOrder : Order ! Association
		HasTicket : Ticket* ! Association
	}

	@AutoCRUD Entity Seat {
		SeatId : String
		TrainId : String
		SeatType : SeatType[HARDBED|SOFTBED|SEAT|STAND]

		[Refer]
		InTicket : Ticket* ! Association
	}

}

